From 4c58ca7233bde10f49da9e63a46c212c0a7602da Mon Sep 17 00:00:00 2001
From: Samuel Kim <ubuntor2000@gmail.com>
Date: Wed, 9 Mar 2016 12:55:50 -0500
Subject: [PATCH] add support for inline tex

---
 web/react/utils/markdown.jsx | 176 ++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 174 insertions(+), 2 deletions(-)

diff --git a/web/react/utils/markdown.jsx b/web/react/utils/markdown.jsx
index 4939160..d176e7b 100644
--- a/web/react/utils/markdown.jsx
+++ b/web/react/utils/markdown.jsx
@@ -69,9 +69,9 @@ class MattermostInlineLexer extends marked.InlineLexer {
 
         this.rules = Object.assign({}, this.rules);
 
-        // modified version of the regex that allows for links starting with www and those surrounded by parentheses
+        // modified version of the regex that allows for links starting with www and those surrounded by parentheses, and inline tex
         // the original is /^[\s\S]+?(?=[\\<!\[_*`~]|https?:\/\/| {2,}\n|$)/
-        this.rules.text = /^[\s\S]+?(?=[\\<!\[_*`~]|https?:\/\/|www\.|\(| {2,}\n|$)/;
+        this.rules.text = /^[\s\S]+?(?=[\\<!\[_*`~\$]|https?:\/\/|www\.|\(| {2,}\n|$)/;
 
         // modified version of the regex that allows links starting with www and those surrounded by parentheses
         // the original is /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/
@@ -80,7 +80,152 @@ class MattermostInlineLexer extends marked.InlineLexer {
         // modified version of the regex that allows <links> starting with www.
         // the original is /^<([^ >]+(@|:\/)[^ >]+)>/
         this.rules.autolink = /^<((?:[^ >]+(@|:\/)|www\.)[^ >]+)>/;
+
+        this.rules.tex = /^\$(?!\$)(.*?)\$/;
     }
+
+    output(src) {
+        var out = ''
+            , link
+            , text
+            , href
+            , cap;
+
+        while (src) {
+            // escape
+            if (cap = this.rules.escape.exec(src)) {
+              src = src.substring(cap[0].length);
+              out += cap[1];
+              continue;
+            }
+
+            // autolink
+            if (cap = this.rules.autolink.exec(src)) {
+              src = src.substring(cap[0].length);
+              if (cap[2] === '@') {
+                text = cap[1].charAt(6) === ':'
+                  ? this.mangle(cap[1].substring(7))
+                  : this.mangle(cap[1]);
+                href = this.mangle('mailto:') + text;
+              } else {
+                text = TextFormatting.sanitizeHtml(cap[1]);
+                href = text;
+              }
+              out += this.renderer.link(href, null, text);
+              continue;
+            }
+
+            // url (gfm)
+            if (!this.inLink && (cap = this.rules.url.exec(src))) {
+              src = src.substring(cap[0].length);
+              text = TextFormatting.sanitizeHtml(cap[1]);
+              href = text;
+              out += this.renderer.link(href, null, text);
+              continue;
+            }
+
+            // tag
+            if (cap = this.rules.tag.exec(src)) {
+              if (!this.inLink && /^<a /i.test(cap[0])) {
+                this.inLink = true;
+              } else if (this.inLink && /^<\/a>/i.test(cap[0])) {
+                this.inLink = false;
+              }
+              src = src.substring(cap[0].length);
+              out += this.options.sanitize
+                ? this.options.sanitizer
+                  ? this.options.sanitizer(cap[0])
+                  : TextFormatting.sanitizeHtml(cap[0])
+                : cap[0]
+              continue;
+            }
+
+            // link
+            if (cap = this.rules.link.exec(src)) {
+              src = src.substring(cap[0].length);
+              this.inLink = true;
+              out += this.outputLink(cap, {
+                href: cap[2],
+                title: cap[3]
+              });
+              this.inLink = false;
+              continue;
+            }
+
+            // reflink, nolink
+            if ((cap = this.rules.reflink.exec(src))
+                || (cap = this.rules.nolink.exec(src))) {
+              src = src.substring(cap[0].length);
+              link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
+              link = this.links[link.toLowerCase()];
+              if (!link || !link.href) {
+                out += cap[0].charAt(0);
+                src = cap[0].substring(1) + src;
+                continue;
+              }
+              this.inLink = true;
+              out += this.outputLink(cap, link);
+              this.inLink = false;
+              continue;
+            }
+
+            // strong
+            if (cap = this.rules.strong.exec(src)) {
+              src = src.substring(cap[0].length);
+              out += this.renderer.strong(this.output(cap[2] || cap[1]));
+              continue;
+            }
+
+            // em
+            if (cap = this.rules.em.exec(src)) {
+              src = src.substring(cap[0].length);
+              out += this.renderer.em(this.output(cap[2] || cap[1]));
+              continue;
+            }
+
+            // code
+            if (cap = this.rules.code.exec(src)) {
+              src = src.substring(cap[0].length);
+              out += this.renderer.codespan(TextFormatting.sanitizeHtml(cap[2], true));
+              continue;
+            }
+
+            // inline tex
+            if (cap = this.rules.tex.exec(src)) {
+                src = src.substring(cap[0].length);
+                out += this.renderer.tex(cap[1], false);
+                continue;
+            }
+
+            // br
+            if (cap = this.rules.br.exec(src)) {
+              src = src.substring(cap[0].length);
+              out += this.renderer.br();
+              continue;
+            }
+
+            // del (gfm)
+            if (cap = this.rules.del.exec(src)) {
+              src = src.substring(cap[0].length);
+              out += this.renderer.del(this.output(cap[1]));
+              continue;
+            }
+
+            // text
+            if (cap = this.rules.text.exec(src)) {
+              src = src.substring(cap[0].length);
+              out += this.renderer.text(TextFormatting.sanitizeHtml(this.smartypants(cap[0])));
+              continue;
+            }
+
+            if (src) {
+              throw new
+                Error('Infinite loop on byte: ' + src.charCodeAt(0));
+            }
+        }
+
+        return out;
+    };
 }
 
 class MattermostParser extends marked.Parser {
@@ -95,6 +240,14 @@ class MattermostParser extends marked.Parser {
 
         return out;
     }
+
+    tok() {
+        if (this.token.type === 'tex') {
+            return this.renderer.tex(this.token.text,
+                this.token.display);
+        }
+        return super.tok();
+    }
 }
 
 class MattermostMarkdownRenderer extends marked.Renderer {
@@ -155,6 +308,25 @@ class MattermostMarkdownRenderer extends marked.Renderer {
         return '<span class="codespan__pre-wrap">' + super.codespan(text) + '</span>';
     }
 
+    tex(text, display) {
+        try {
+            const html = katex.renderToString(text, {throwOnError: false, displayMode: display});
+            return html;
+        } catch (e) {
+            if (display) {
+                return (
+                    '<pre>' +
+                        '<code class="hljs">' +
+                            TextFormatting.sanitizeHtml(text) + '\n' +
+                        '</code>' +
+                    '</pre>'
+                );
+            } else {
+                return this.codespan(text);
+            }
+        }
+    }
+
     br() {
         if (this.formattingOptions.singleline) {
             return ' ';
-- 
2.4.10

